What is JavaScript

1. Is a dynamic weakly typed programming language which is
a.compiled at runtime.
b. It can be executed as part of a webpage in a browser or directly
on any machine (Host environment)

2. Was created to make webpages more dynamic
-change content on a page directly from inside the browser
- It is called LiveScript
- due to it Java style and popularity of Java xalled it JavaScript

3. It is indepedent from Java and has nothing in common

HOW Do Webpages Works ?

-User visit a webpage
- You use a browser to access your webpage
- You use your laptop with a browser and enter your URL
- When you visit the webpage of the URL AND the webpage get loaded,A request is sent to a SERVER where the HTML file is hosted
- The server loads the webpage and sends it back to your browser in a form of RESPONSE.

LET SAY THE WEBPAGE IS AN ECOMMERCE PAGE
- Let say the loaded webspage is an online shop.
- The user clicks a button to submit a Form (Example: To order some product)
- This will trigger a new request which is sent by the browser to the server
- A form submission is sent to the server and the server will handle the incoming request
- maybe store some order data in a database and once it's done, it will reply back with a new RESPONSE
-WITH A NEW PAGE, A NEW HTM DOCUMENT WHICH IS SENT BACK TO THE CLIENT.
-MAYBE THE ORDER CONFIRMATION PAGE.
-This is how we interract with the WEB

3. JS helps us make this more reactive
It helps us make a webpage more reactive and skip that second response flow in some circumstances.
-to instead change the already loaded page and do something there

4. Created (assets,info) folders and index.html file
Assets folder can contain (images, scripts,styles) folders

Script Folder ->apps.js

Max showed an example where you can load a page within an existing Page without redirecting out of the main page
Example:
1. He grabbed a text within a paragraph tag which was to display as a link to another page
Example
<p> Kofi is going to school</p>

2. He copied the text (Kofi is going to School)

3. Pasted it in an anchor tag

<a href="#" data-text="Kofi is going to School" class="info-modal></a>
<a href="#" data-text="Weekly Meal for Kofi" class="info-modal></a>

4. He added
<script src="assets/scripts/app.js" defer></script>

5. Now go back to the browser and reload. You will see the modal popup.

Finally: In summary JS is a Dynamic,weakly-typed programming language. It is an Interpreted language
That means it is compiled on the fly. It compiled before it runn and not compiled during development

- It is a Hosted language and runs in different environment (EG: Browser)
-Most prominent use-case.Run Code in a browser
VIDEO 4:

1. https://discord.com/invite/gxvEWGU

VIDEO 5
How is JS Executed
-Let say you run your JavaScript code
-And you want it to have some effect on your webpage if we talk about the browser as our envirnment where we run the script
- One important thing built into any environment when you want to run your JS

1. Chrome is called V8

2. SpinderMonkey - Firefox

- The job of the engine (Parse the code (means reads & understand your code) -> Compile to Machine Code because machine code execute faster -> then execution is done)
- Everthing is done on a single Thread (handles multiple tasks on one single thread)
Learnt what (Interpreter means, execution means)\

VIDEO 6:
Dynamic and Weakly Typed

Dynamic, interpreted Programming Language
-Not pre-compiled, instead parsed and compiled "on the fly" (ex: browser)
- Code evaluated and executed at runtime
- Code can change at runtime (ex: type of variable)-> Example if you have a variable storing text you can be allowed to switch dataType and store integer.

Weakly Typed Programming Language means : When we work with data (text or number) you don't tell JS what form of data you are about to use.
- Data types are assumed (assigned to variables) automatically
-You dont define that some variable has to hold a certain value (e.g a number)
- Data types are not set in stone but can change

Video 7:
JS run on a Host Environment

- Can run on other environment
a. Browser-side
-JS was invented to create more dynamic websites by executing in the browser.
- JS can manipulate the HTML code, CSS, send background HTTP request, etc
- JS cant access local filessytem, interact with the OS.

- Other (e.g. Server)
a. Googles JS engine (V8) was extracted to run JS anywhere (Node.js)
b. Node.js can be executed on any machine and is there often used to build web backends (server-side JS)
C. nODE.JS CAN ACCESS THE LOCAL FILESYSTEM, interact with the OS. it can't Manipulate HTML or CSS


OUR COURSE:

Getting Started
1.Base syntax (variables and functions)
2. efficient development & debugging
3. control structures
4.Behind the Scenes of JS
5. A closer Look at Functions
6.DOM Baics
7. Arrays and iterables


Build a Strong Foundation
1. Classes and OOP
2. Constructor Functions and Prototypes
3. More about DOM & Browser
4. APIs
5.EVENTS
6.Functions Deep Dive
7. Asychronous Code
8. Background Http (Ajax)

ADVANCED CONCEPTS
1. 3rd Party Libaries
2. JS modeules
3. Tooling (Webpack, Babel..)
4. Working with browser storage
5.. Browser support
6. Js fRAMEWORKS
7. Meta-Programming
8. Node.JS introduction
9.Security
10.Deployment
11. Performance Optimizations and Memory Leaks


SETTING UP YOUR ENVIRONMENT
1.Visual Studio Code
2. Google Chrome
3. Core extensions and configuration

1. Install VScode environment
- Change the theme by going through
. click on code ->preferences -> Color theme
NB: In windows preferences is under FILE

You can OFF Status Bar by (View->Appearance-> untick Show status Bar)

- Add plugins and extension (View->extension)
- material Icon Theme (extension : install)
- Prettier (install it) It helps with code formatting

Code -> Preferences -> Keyboard Shortcut -> search :Format Shortcut
Code-> Preference -> settings ->search : prettier


GIT CONTROL
https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control

GIT TUTORIAL (https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control)

 2. http://github.com/
 3. https://academind.com/learn/web-dev/github-the-basics/
3. https://academind.com/learn/web-dev/github-the-basics/


START PRACTICAL:

1. Create JS file in Assets Folder - scripts folder(app.js)
NOTE: There are couple of ways to import javaScript

1st Way: Go to your html file ,in the head section you add script tags
example:  <!--Tis is writing JS code directly in html file in the head section using script tag-->
            <!--This is quite not advisable because as your JS Code get lengthy it will pose a challenge to maintain your script -->
            <script>
                alert("This works fine");
            </script>

2nd Way: Go into the head tag of html file and use the script tag and add your source attribute (src) and point to the location of your JS file
         <script src="assets/scripts/app.js"> </script>

NOTE: 1. To ensure the Html codes loads 1st before the JS , just locate the source of the js at the down body close tag of your html
      2.  You need to also reference the code in the vendor fold because the code we will write in (app.js) will depend on it.
      Always reference what you depend on before your custom js is referenced in the that sequence


Video 19:

/*Variable: I is a data container or storage where the stored data will be used to achieve a purpose. Or data container where it value can change
   In JS the format is [let userName = 'Felix';
                             userName = 'Ackuayi';
                        ]

     Constant: With this form of variable declaration the value in the variable is fixed and cannot be changed
                  In JS the format is [const totalUsers = 15;
                             userName =  20; //this will throw an error because it has been declared constant and cannot be changed
                        ]


*
* */

Video 20

/*1. One thing about calculator is about Result, so we 1st create variable (let result)

   Naming conversion in JS
   -It is case sensitive
   -Camel casing ->Allowed (let userName)
   - allowed -> ageGroup5
   - allowed ->  $kindOfSpecial
   - allowed -> _internalValue

   NOT ALLOWED

    let user_name (allowed but bad practice ,use Camel case instead)
    let 21Players (starting digits not allowed)
    let user-b (No special characters)
    let let (Keywords not allowed)
*
* */


